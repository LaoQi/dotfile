" Load vim-plug

if empty(glob("~/.vim/autoload/plug.vim"))
	execute '!curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.github.com/junegunn/vim-plug/master/plug.vim'
endif
call plug#begin('~/.vim/plugged')

Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
nmap <silent><F3> :NERDTreeToggle<CR>
Plug 'kien/ctrlp.vim'
"Plug 'rust-lang/rust.vim', {'for': 'rust'}
"Plug 'fs111/pydoc.vim', {'for': 'python'}
Plug 'godlygeek/tabular', {'for': 'markdown'}
Plug 'plasticboy/vim-markdown', {'for': 'markdown'}
	let g:vim_markdown_folding_disabled = 1
"Plug 'pangloss/vim-javascript', {'for': 'javascript'}
Plug 'fatih/vim-go', {'for': 'go'}
	let g:go_fmt_command = "goimports"
Plug 'sheerun/vim-polyglot'
Plug 'w0rp/ale', {'for': 'python'}
	let g:ale_fix_on_save = 1
	let g:ale_completion_enabled = 1
	let g:ale_sign_column_always = 1
	let g:airline#extensions#ale#enabled = 1
Plug 'Shougo/neocomplete.vim'
	"Note: This option must be set in .vimrc(_vimrc).  NOT IN
	".gvimrc(_gvimrc)!
	"" Disable AutoComplPop.
	let g:acp_enableAtStartup = 0
	" Use neocomplete.
	let g:neocomplete#enable_at_startup = 1
	" Use smartcase.
	let g:neocomplete#enable_smart_case = 1
	" Set minimum syntax keyword length.
	let g:neocomplete#sources#syntax#min_keyword_length = 3

	let g:neocomplete#data_diretory = $HOME.'/.vim/tmp/neocomplete'

	" Define dictionary.
	let g:neocomplete#sources#dictionary#dictionaries = {
				\ 'default' : '',
				\ 'vimshell' : $HOME.'/.vim/tmp/vimshell_hist',
				\ 'scheme' : $HOME.'/.vim/tmp/gosh_completions'
				\ }

	" Define keyword.
	if !exists('g:neocomplete#keyword_patterns')
		let g:neocomplete#keyword_patterns = {}
	endif
	let g:neocomplete#keyword_patterns['default'] = '\h\w*'
	noremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"	

	autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
	autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
	autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
	autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
	autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

	" Enable heavy omni completion.
	if !exists('g:neocomplete#sources#omni#input_patterns')
		let g:neocomplete#sources#omni#input_patterns = {}
	endif
" Plug 'Valloric/YouCompleteMe'

call plug#end()            " required
"filetype plugin indent on    " required
" ------------------------------------------------
" ------------------------------------------------
" ------------------------------------------------

if has("syntax")
  syntax on
endif

set viminfo='10,\"100,:20,%,n~/.vim/tmp/viminfo
set tabstop=4
set softtabstop=4
set shiftwidth=4
set nu
" set foldmethod=syntax
" set foldlevel=99
"set hlsearch
set t_Co=256
"set backspace=2
"set bg=dark
set wrap
set encoding=utf8
set fileencoding=utf8
set fileencodings=utf8,gbk,gb2321

"status line 
"-----------------------------------
set showcmd
set showmode
set ruler

set laststatus=2
set statusline=%t\ [%{strlen(&fenc)?&fenc:'none'},%{&ff}]%h%m%r%y
set statusline+=%=
set statusline+=\ %c,%l/%L\ \|\ %n\ \|\ %P
"-----------------------------------

nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

if has('gui_running')
    set guioptions-=T  " no toolbar
    colorscheme codeschool
else
    "colorscheme pablo
    colorscheme molokai
endif
